generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String              @id @default(cuid())
  name                     String?
  email                    String?             @unique
  emailVerified            DateTime?
  hashedPassword           String?
  image                    String?
  surname                  String?
  username                 String              @unique
  completedOnboarding      Boolean             @default(false)
  useCase                  UseCase?
  isOnline                 Boolean             @default(false)
  lastSeen                 DateTime?
  points                   Int                 @default(0)
  accounts                 Account?
  fileAttachments          FileAttachment[]
  createdMindMaps          MindMap[]           @relation("MindMapCreatedByUser")
  updatedMindMaps          MindMap[]           @relation("MindMapUpdatedByUser")
  userCreatedNotifications Notification[]      @relation("NotifyCreator")
  userNotifications        Notification[]      @relation("NotifyUser")
  pomodoroSettings         PomodoroSettings[]
  sessions                 Session?
  subscriptions            Subscription[]
  createdTasks             Task[]              @relation("TaskCreatedByUser")
  updatedTasks             Task[]              @relation("TaskUpdatedByUser")
  createdWorkspaces        Workspace[]         @relation("CreatedBy")
  assignedToMindMap        assignedToMindMap[]
  assignedToTask           assignedToTask[]
  savedMindMaps            savedMindMaps[]
  savedTask                savedTask[]
  
  // Points and Pomodoro relations
  pomodoroSessions         PomodoroSession[]
  pointTransactions        PointTransaction[]
}

model savedMindMaps {
  id        String  @id @default(cuid())
  userId    String
  mindMapId String
  mindMap   MindMap @relation(fields: [mindMapId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @unique
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
}

model Notification {
  id              String          @id @default(cuid())
  userId          String
  notifyCreatorId String
  workspaceId     String
  clicked         Boolean         @default(false)
  createdDate     DateTime        @default(now())
  notifyType      NotifyType
  newUserRole     UserPermission?
  taskId          String?
  mindMapId       String?
  seen            Boolean         @default(false)
  notifyCreator   User            @relation("NotifyCreator", fields: [notifyCreatorId], references: [id], onDelete: Cascade)
  user            User            @relation("NotifyUser", fields: [userId], references: [id], onDelete: Cascade)
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model FileAttachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  key          String
  uploadedById String
  createdAt    DateTime @default(now())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
}

model Workspace {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String?
  image        String?
  adminCode    String         @unique
  canEditCode  String         @unique
  inviteCode   String         @unique
  readOnlyCode String         @unique
  color        CustomColors   @default(BLUE)
  mindMaps     MindMap[]
  notification Notification[]
  subscribers  Subscription[]
  tags         Tag[]
  tasks        Task[]
  Creator      User?          @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  
  // Points system relations
  pomodoroSessions PomodoroSession[]
}

model Task {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  updatedUserId  String?
  creatorId      String
  workspaceId    String
  title          String
  emoji          String           @default("1f9e0")
  content        Json?
  dateId         String?
  isCompleted    Boolean          @default(false)
  completedAt    DateTime?
  creator        User             @relation("TaskCreatedByUser", fields: [creatorId], references: [id], onDelete: Cascade)
  taskDate       TaskDate?        @relation(fields: [dateId], references: [id], onDelete: Cascade)
  updatedBy      User?            @relation("TaskUpdatedByUser", fields: [updatedUserId], references: [id], onDelete: Cascade)
  workspace      Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assignedToTask assignedToTask[]
  savedTask      savedTask[]
  tags           Tag[]            @relation("TagToTask")
}

model savedTask {
  id     String @id @default(cuid())
  userId String
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PomodoroSettings {
  id                 String              @id @default(cuid())
  userId             String
  workDuration       Int                 @default(25)
  shortBreakDuration Int                 @default(5)
  longBreakDuration  Int                 @default(15)
  longBreakInterval  Int                 @default(2)
  rounds             Int                 @default(3)
  soundEffect        PomodoroSoundEffect @default(BELL)
  soundEffectVolume  Float               @default(0.5)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model assignedToTask {
  id     String @id @default(cuid())
  userId String
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model assignedToMindMap {
  id        String  @id @default(cuid())
  userId    String
  mindMapId String
  mindMap   MindMap @relation(fields: [mindMapId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String       @id @default(cuid())
  name        String
  color       CustomColors
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  mindMaps    MindMap[]    @relation("MindMapToTag")
  tasks       Task[]       @relation("TagToTask")
}

model TaskDate {
  id   String  @id @default(cuid())
  from String?
  to   String?
  Task Task[]
}

model Subscription {
  userId      String
  workspaceId String
  userRole    UserPermission @default(READ_ONLY)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@id([userId, workspaceId])
}

model MindMap {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  creatorId         String
  updatedUserId     String?
  workspaceId       String
  content           Json?
  title             String
  emoji             String              @default("1f9e0")
  creator           User                @relation("MindMapCreatedByUser", fields: [creatorId], references: [id], onDelete: Cascade)
  updatedBy         User?               @relation("MindMapUpdatedByUser", fields: [updatedUserId], references: [id], onDelete: Cascade)
  workspace         Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assignedToMindMap assignedToMindMap[]
  savedMindMaps     savedMindMaps[]
  tags              Tag[]               @relation("MindMapToTag")

  @@index([workspaceId])
  @@index([updatedUserId])
  @@index([creatorId])
}

enum UserPermission {
  ADMIN
  CAN_EDIT
  READ_ONLY
  OWNER
}

enum UseCase {
  WORK
  STUDY
  PERSONAL_USE
}

enum NotifyType {
  NEW_USER_IN_WORKSPACE
  USER_LEFT_WORKSPACE
  NEW_TASK
  NEW_MIND_MAP
  NEW_ROLE
  NEW_ASSIGNMENT_TASK
  NEW_ASSIGNMENT_MIND_MAP
}

enum PomodoroSoundEffect {
  ANALOG
  BIRD
  CHURCH_BELL
  DIGITAL
  FANCY
  BELL
}

enum CustomColors {
  PURPLE
  RED
  GREEN
  BLUE
  PINK
  YELLOW
  ORANGE
  CYAN
  LIME
  EMERALD
  INDIGO
  FUCHSIA
}

// Pomodoro Session Tracking for Points
model PomodoroSession {
  id          String   @id @default(cuid())
  userId      String
  duration    Int      // Duration in minutes
  workspaceId String?  // Optional: track which workspace context
  completedAt DateTime @default(now())
  pointsEarned Int     // Points earned for this session
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([completedAt])
}

// Point Transaction History
model PointTransaction {
  id          String            @id @default(cuid())
  userId      String
  points      Int               // Can be positive (earned) or negative (spent)
  type        PointType
  description String
  relatedId   String?          // Related task/session ID for reference
  createdAt   DateTime          @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

enum PointType {
  POMODORO_COMPLETED
  TASK_COMPLETED
  MANUAL_ADJUSTMENT
}
